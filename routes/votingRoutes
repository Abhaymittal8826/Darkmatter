const express = require("express");
const Vote = require("../models/Vote");
const jwt = require("jsonwebtoken");

const router = express.Router();

// Middleware to verify JWT
const authMiddleware = (req, res, next) => {
  const token = req.header("Authorization");
  if (!token) return res.status(401).json({ message: "Access denied" });

  try {
    const verified = jwt.verify(token, process.env.JWT_SECRET);
    req.user = verified;
    next();
  } catch (err) {
    res.status(400).json({ message: "Invalid token" });
  }
};

// Cast a vote
router.post("/cast", authMiddleware, async (req, res) => {
  const { option } = req.body;

  try {
    const newVote = new Vote({ option, userId: req.user.id });
    await newVote.save();
    res.status(201).json({ message: "Vote casted successfully" });
  } catch (err) {
    res.status(500).json({ message: "Error casting vote" });
  }
});

// Get all votes
router.get("/", async (req, res) => {
  try {
    const votes = await Vote.find().populate("userId", "username");
    res.json(votes);
  } catch (err) {
    res.status(500).json({ message: "Error fetching votes" });
  }
});

module.exports = router;
